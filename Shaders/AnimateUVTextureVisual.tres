[gd_resource type="ShaderMaterial" load_steps=11 format=2]

[ext_resource path="res://Textures/Other/Beam.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=2]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 4, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 1, 0.539063, 0, 1 )

[sub_resource type="VisualShaderNodeColorOp" id=4]
operator = 4

[sub_resource type="VisualShaderNodeScalarConstant" id=5]
constant = 0.1

[sub_resource type="VisualShaderNodeVectorOp" id=6]

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = ExtResource( 1 )

[sub_resource type="VisualShader" id=9]
code = "shader_type spatial;
render_mode blend_add, cull_disabled, diffuse_toon, specular_disabled, async_visible, shadows_disabled;

uniform sampler2D tex_frg_9;



void vertex() {
// Output:0

}

void fragment() {
// Input:10
	float n_out10p0 = TIME;

// VectorOp:11
	vec3 n_in11p1 = vec3(0.00000, 4.00000, 0.00000);
	vec3 n_out11p0 = vec3(n_out10p0) * n_in11p1;

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// VectorOp:3
	vec3 n_out3p0 = n_out11p0 + n_out8p0;

// Texture:9
	vec4 tex_frg_9_read = texture(tex_frg_9, n_out3p0.xy);
	vec3 n_out9p0 = tex_frg_9_read.rgb;
	float n_out9p1 = tex_frg_9_read.a;

// Color:12
	vec3 n_out12p0 = vec3(1.000000, 0.539063, 0.000000);
	float n_out12p1 = 1.000000;

// ColorOp:13
	vec3 n_out13p0;
	{
		float base = n_out9p0.x;
		float blend = n_out12p0.x;
		if (base < 0.5) {
			n_out13p0.x = 2.0 * base * blend;
		} else {
			n_out13p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out9p0.y;
		float blend = n_out12p0.y;
		if (base < 0.5) {
			n_out13p0.y = 2.0 * base * blend;
		} else {
			n_out13p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out9p0.z;
		float blend = n_out12p0.z;
		if (base < 0.5) {
			n_out13p0.z = 2.0 * base * blend;
		} else {
			n_out13p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Scalar:14
	float n_out14p0 = 0.100000;

// Output:0
	ALBEDO = n_out13p0;
	ALPHA = n_out14p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -211.726, -571.609 )
modes/blend = 1
modes/cull = 2
modes/diffuse = 4
modes/specular = 4
flags/shadows_disabled = true
nodes/fragment/0/position = Vector2( 1060, -40 )
nodes/fragment/3/node = SubResource( 6 )
nodes/fragment/3/position = Vector2( 380, -260 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 140, -120 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 600, -240 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -80, -380 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 140, -340 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 620, 120 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 800, -60 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 780, 180 )
nodes/fragment/connections = PoolIntArray( 3, 0, 9, 0, 10, 0, 11, 0, 11, 0, 3, 0, 12, 0, 13, 1, 9, 0, 13, 0, 13, 0, 0, 0, 8, 0, 3, 1, 14, 0, 0, 1 )

[resource]
shader = SubResource( 9 )
