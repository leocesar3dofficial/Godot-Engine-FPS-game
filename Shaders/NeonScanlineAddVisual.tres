[gd_resource type="ShaderMaterial" load_steps=17 format=2]

[ext_resource path="res://Textures/Other/NeonSignsFreepick.png" type="Texture" id=1]
[ext_resource path="res://Textures/Other/Scanline.jpg" type="Texture" id=2]
[ext_resource path="res://Textures/Other/noise.jpg" type="Texture" id=3]

[sub_resource type="VisualShaderNodeColorOp" id=1]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 1, 1, 1 ) ]
operator = 1

[sub_resource type="VisualShaderNodeColorOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.3, 0.3, 0.3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeColorOp" id=3]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.3, 0.3, 0.3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeColorFunc" id=4]

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.7, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeColorOp" id=10]
operator = 4

[sub_resource type="VisualShaderNodeVectorOp" id=11]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 1, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "uv"

[sub_resource type="VisualShader" id=13]
code = "shader_type spatial;
render_mode blend_add, cull_disabled, diffuse_toon, specular_disabled, async_visible, shadows_disabled;

uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_5;
uniform sampler2D tex_frg_6;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Input:3
	float n_out3p0 = TIME;

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, vec3(n_out3p0).xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorOp:4
	vec3 n_in4p1 = vec3(0.00000, 0.70000, 0.00000);
	vec3 n_out4p0 = vec3(n_out3p0) * n_in4p1;

// Input:9
	vec3 n_out9p0 = vec3(UV, 0.0);

// VectorOp:8
	vec3 n_out8p0 = n_out4p0 + n_out9p0;

// Texture:6
	vec4 tex_frg_6_read = texture(tex_frg_6, n_out8p0.xy);
	vec3 n_out6p0 = tex_frg_6_read.rgb;
	float n_out6p1 = tex_frg_6_read.a;

// ColorOp:7
	vec3 n_out7p0;
	{
		float base = n_out5p0.x;
		float blend = n_out6p0.x;
		if (base < 0.5) {
			n_out7p0.x = 2.0 * base * blend;
		} else {
			n_out7p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out5p0.y;
		float blend = n_out6p0.y;
		if (base < 0.5) {
			n_out7p0.y = 2.0 * base * blend;
		} else {
			n_out7p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out5p0.z;
		float blend = n_out6p0.z;
		if (base < 0.5) {
			n_out7p0.z = 2.0 * base * blend;
		} else {
			n_out7p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// ColorOp:10
	vec3 n_in10p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out10p0 = abs(n_out7p0 - n_in10p1);

// ColorFunc:14
	vec3 n_out14p0;
	{
		vec3 c = n_out2p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		n_out14p0 = vec3(max2, max2, max2);
	}

// ColorOp:12
	vec3 n_out12p0 = min(n_out10p0, n_out14p0);

// ColorOp:13
	vec3 n_in13p1 = vec3(0.30000, 0.30000, 0.30000);
	vec3 n_out13p0 = min(n_out12p0, n_in13p1);

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = dot(n_out13p0, vec3(0.333333, 0.333333, 0.333333));
	EMISSION = n_out2p0;

}

void light() {
// Output:0

}
"
modes/blend = 1
modes/cull = 2
modes/diffuse = 4
modes/specular = 4
flags/shadows_disabled = true
nodes/fragment/0/position = Vector2( 1280, 40 )
nodes/fragment/2/node = SubResource( 5 )
nodes/fragment/2/position = Vector2( -80, 20 )
nodes/fragment/3/node = SubResource( 6 )
nodes/fragment/3/position = Vector2( -680, 240 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( -480, 440 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( -40, 260 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( -40, 500 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( 300, 340 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( -260, 580 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( -520, 660 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 520, 320 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 780, 220 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 1020, 240 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( 300, 240 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 3, 0, 5, 0, 6, 0, 7, 1, 4, 0, 8, 0, 8, 0, 6, 0, 9, 0, 8, 1, 5, 0, 7, 0, 2, 0, 0, 0, 2, 0, 0, 5, 7, 0, 10, 0, 10, 0, 12, 0, 12, 0, 13, 0, 13, 0, 0, 1, 2, 0, 14, 0, 14, 0, 12, 1 )

[resource]
shader = SubResource( 13 )
